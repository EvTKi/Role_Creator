# release.py ‚Äî –≤—ã–ø—É—Å–∫ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏

import subprocess
import sys
from pathlib import Path


def run(cmd: str, check=True, shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞"""
    print(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    result = subprocess.run(
        cmd,
        shell=shell,
        cwd=ROOT_DIR,
        capture_output=True,
        text=True,
        encoding='utf-8',
        errors='replace'
    )
    if result.stdout:
        clean_out = result.stdout.strip()
        if clean_out:
            print(f"‚úÖ {clean_out}")
    if result.stderr:
        clean_err = result.stderr.strip()
        if clean_err:
            print(f"‚ö†Ô∏è  {clean_err}")
    if check and result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.returncode}")
        sys.exit(result.returncode)
    return result


# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ ===
SCRIPT_DIR = Path(__file__).parent
ROOT_DIR = SCRIPT_DIR.parent if SCRIPT_DIR.name == 'build-tools' else SCRIPT_DIR
VERSION_FILE = ROOT_DIR / "VERSION"


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –≤—ã–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")
    print("–§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: X.Y.Z, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5.0")

    version = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏: ").strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    parts = version.split(".")
    if len(parts) != 3 or not all(part.isdigit() for part in parts):
        print("‚ùå –û—à–∏–±–∫–∞: –≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5.0)")
        sys.exit(1)

    tag_name = f"v{version}"

    print(f"\nüì¶ –í–µ—Ä—Å–∏—è: {version}")
    print(f"üè∑  –¢–µ–≥: {tag_name}")

    confirm = input("\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø—É—Å–∫ (y/N): ").strip().lower()
    if confirm not in ("y", "yes"):
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)

    # –û–±–Ω–æ–≤–ª—è–µ–º VERSION
    try:
        with open(VERSION_FILE, "w", encoding="utf-8", newline='\n') as f:
            f.write(f"{version}\n")
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ VERSION: {version}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å VERSION: {e}")
        sys.exit(1)

    # Git –∫–æ–º–∞–Ω–¥—ã
    run("git add VERSION")
    run(f'git commit -m "chore: bump version to {version}"')
    run("git checkout main")

    # Merge (–Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω)
    merge_result = run(
        "git merge HEAD@{1} --no-ff -m 'chore: merge release branch'", check=False)
    if merge_result.returncode != 0:
        print("‚ÑπÔ∏è  Merge –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")

    run("git push origin main")
    run(f"git tag {tag_name}")
    run(f"git push origin {tag_name}")

    print("\n" + "‚úÖ" * 50)
    print(f"üéâ –í—ã–ø—É—Å–∫ {tag_name} –∑–∞–ø—É—â–µ–Ω!")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Actions:")
    print("  python build.py")
    print("‚úÖ" * 50)


if __name__ == "__main__":
    main()
